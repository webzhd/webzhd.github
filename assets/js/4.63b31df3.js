(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{115:function(t,a,r){"use strict";r.r(a);var e=r(3),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,a=t.$createElement,r=t._self._c||a;return r("div",{staticClass:"content"},[r("h1",{attrs:{id:"javascript作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#javascript作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" JavaScript作用域")]),r("h2",{attrs:{id:"rhs和lhs"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rhs和lhs","aria-hidden":"true"}},[t._v("#")]),t._v(" RHS和LHS")]),r("blockquote",[r("p",[t._v("当变量出现在赋值操作的左侧时进行 LHS 查询, 其他为 RHS 查询，RHS 查询与简单地查找某个变量的值别无二致， 而 LHS 查询则是试图找到变量的容器本身， 从而可以对其赋值")])]),r("h2",{attrs:{id:"什么是作用域"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#什么是作用域","aria-hidden":"true"}},[t._v("#")]),t._v(" 什么是作用域")]),r("blockquote",[r("p",[t._v("负责收集并维护由所有声明的标识符（ 变量） 组成的一系列查\n询， 并实施一套非常严格的规则， 确定当前执行的代码对这些标识符的访问权限。")])]),r("h2",{attrs:{id:"作用域嵌套规则"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#作用域嵌套规则","aria-hidden":"true"}},[t._v("#")]),t._v(" 作用域嵌套规则")]),r("blockquote",[r("p",[t._v("作用域是根据名称查找变量的一套规则。 实际情况中， 通常需要同时顾及几个作用域。当一个块或函数嵌套在另一个块或函数中时， 就发生了作用域的嵌套。引擎从当前的执行作用域开始查找变量， 如果找不到，就向上一级继续查找。 当抵达最外层的全局作用域时， 无论找到还是没找到， 查找过程都\n会停止。")])]),r("h2",{attrs:{id:"查询异常"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#查询异常","aria-hidden":"true"}},[t._v("#")]),t._v(" 查询异常")]),r("blockquote",[r("p",[t._v("如果 RHS 查询在所有嵌套的作用域中遍寻不到所需的变量， 引擎就会抛出 ReferenceError异常。 值得注意的是， ReferenceError 是非常重要的异常类型。相较之下， 当引擎执行 LHS 查询时， 如果在顶层（ 全局作用域） 中也无法找到目标变量，全局作用域中就会创建一个具有该名称的变量， 并将其返还给引擎。")])])])}],!1,null,null,null);a.default=s.exports}}]);